generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  role          String        @default("member")
  boards        BoardMember[]
  messages      Message[]     @relation("UserMessages")
  assignedCards Card[]        @relation("CardAssignments") // <-- opposite field here
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  activities Activity[]
}

model Board {
  id          String        @id @default(uuid())
  name        String
  description String?
  members     BoardMember[]
  lists       List[]
  messages    Message[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  activities Activity[]
}

model List {
  id      String @id @default(uuid())
  title   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id])
  cards   Card[]
  activities Activity[]
}

model Card {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  attachments String[]
  status      String    @default("To Do")
  order       Int       @default(0)

  list   List   @relation(fields: [listId], references: [id])
  listId String

  assignedUsers User[] @relation("CardAssignments") // <-- relation name must match User.assignedCards
  activities Activity[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])
  sender    User     @relation("UserMessages", fields: [senderId], references: [id]) // ðŸ‘ˆ ADD relation name
  senderId  String
  createdAt DateTime @default(now())
}

model BoardMember {
  id      String @id @default(uuid())
  role    String @default("member") // member or admin
  board   Board  @relation(fields: [boardId], references: [id])
  boardId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, userId])
}

model Activity {
  id        String   @id @default(cuid())
  action    String
  cardId    String?
  listId    String?
  boardId   String?
  userId    String?
  timestamp DateTime @default(now())

  card      Card?    @relation(fields: [cardId], references: [id])
  list      List?    @relation(fields: [listId], references: [id])
  board     Board?   @relation(fields: [boardId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}
